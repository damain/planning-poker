-- Create rooms table
create table if not exists rooms (
  id bigint generated by default as identity primary key,
  created_at timestamp with time zone default timezone('utc'::text, now()) not null,
  code text unique not null,
  name text not null,
  active boolean default true,
  current_story text,
  show_votes boolean default false
);

-- Create stories table
create table if not exists stories (
  id bigint generated by default as identity primary key,
  created_at timestamp with time zone default timezone('utc'::text, now()) not null,
  room_code text references rooms(code) on delete cascade,
  title text not null,
  description text,
  final_estimate integer,
  status text default 'pending'
);

-- Create votes table
create table if not exists votes (
  id bigint generated by default as identity primary key,
  created_at timestamp with time zone default timezone('utc'::text, now()) not null,
  room_code text references rooms(code) on delete cascade,
  story_id bigint references stories(id) on delete cascade,
  user_name text not null,
  vote_value integer,
  unique(story_id, user_name)
);

-- Create room_users table
CREATE TABLE IF NOT EXISTS public.room_users (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT timezone('utc'::text, now()) NOT NULL,
    room_code TEXT NOT NULL,
    user_name TEXT NOT NULL,
    last_seen TIMESTAMP WITH TIME ZONE NOT NULL,
    UNIQUE(room_code, user_name)
);

-- Set up row level security
alter table rooms enable row level security;
alter table stories enable row level security;
alter table votes enable row level security;
ALTER TABLE public.room_users ENABLE ROW LEVEL SECURITY;

-- Create policies for rooms
DROP POLICY IF EXISTS "Allow public read access to rooms" ON rooms;
CREATE POLICY "Allow public read access to rooms"
  on rooms for select
  to anon
  using (true);

DROP POLICY IF EXISTS "Allow public insert access to rooms" ON rooms;
CREATE POLICY "Allow public insert access to rooms"
  on rooms for insert
  to anon
  with check (true);

DROP POLICY IF EXISTS "Allow public update access to rooms" ON rooms;
CREATE POLICY "Allow public update access to rooms"
  on rooms for update
  to anon
  using (true);

-- Create policies for stories
DROP POLICY IF EXISTS "Allow public read access to stories" ON stories;
CREATE POLICY "Allow public read access to stories"
  on stories for select
  to anon
  using (true);

DROP POLICY IF EXISTS "Allow public insert access to stories" ON stories;
CREATE POLICY "Allow public insert access to stories"
  on stories for insert
  to anon
  with check (true);

DROP POLICY IF EXISTS "Allow public update access to stories" ON stories;
CREATE POLICY "Allow public update access to stories"
  on stories for update
  to anon
  using (true);

-- Create policies for votes
DROP POLICY IF EXISTS "Allow public read access to votes" ON votes;
CREATE POLICY "Allow public read access to votes"
  on votes for select
  to anon
  using (true);

DROP POLICY IF EXISTS "Allow public insert access to votes" ON votes;
CREATE POLICY "Allow public insert access to votes"
  on votes for insert
  to anon
  with check (true);

DROP POLICY IF EXISTS "Allow public update access to votes" ON votes;
CREATE POLICY "Allow public update access to votes"
  on votes for update
  to anon
  using (true);

-- Allow public access to room_users
DROP POLICY IF EXISTS "Allow public access to room_users" ON public.room_users;
CREATE POLICY "Allow public access to room_users"
ON public.room_users
FOR ALL
TO public
USING (true);
